// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.3
// source: pkg/imrpc/proxy.proto

package imrpc

import (
	enginerpc "github.com/longhorn/longhorn-interface/pkg/enginerpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProxyEngineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Deprecated: Replaced by `data_engine`.
	//
	// Deprecated: Do not use.
	BackendStoreDriver BackendStoreDriver `protobuf:"varint,2,opt,name=backend_store_driver,json=backendStoreDriver,proto3,enum=pkg.imrpc.BackendStoreDriver" json:"backend_store_driver,omitempty"`
	EngineName         string             `protobuf:"bytes,3,opt,name=engine_name,json=engineName,proto3" json:"engine_name,omitempty"`
	VolumeName         string             `protobuf:"bytes,4,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	DataEngine         DataEngine         `protobuf:"varint,5,opt,name=data_engine,json=dataEngine,proto3,enum=pkg.imrpc.DataEngine" json:"data_engine,omitempty"`
}

func (x *ProxyEngineRequest) Reset() {
	*x = ProxyEngineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyEngineRequest) ProtoMessage() {}

func (x *ProxyEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyEngineRequest.ProtoReflect.Descriptor instead.
func (*ProxyEngineRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{0}
}

func (x *ProxyEngineRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Deprecated: Do not use.
func (x *ProxyEngineRequest) GetBackendStoreDriver() BackendStoreDriver {
	if x != nil {
		return x.BackendStoreDriver
	}
	return BackendStoreDriver_v1
}

func (x *ProxyEngineRequest) GetEngineName() string {
	if x != nil {
		return x.EngineName
	}
	return ""
}

func (x *ProxyEngineRequest) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *ProxyEngineRequest) GetDataEngine() DataEngine {
	if x != nil {
		return x.DataEngine
	}
	return DataEngine_DATA_ENGINE_V1
}

type EngineVersionProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *enginerpc.VersionOutput `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EngineVersionProxyResponse) Reset() {
	*x = EngineVersionProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVersionProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVersionProxyResponse) ProtoMessage() {}

func (x *EngineVersionProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVersionProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineVersionProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{1}
}

func (x *EngineVersionProxyResponse) GetVersion() *enginerpc.VersionOutput {
	if x != nil {
		return x.Version
	}
	return nil
}

type EngineVolumeGetProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume *enginerpc.Volume `protobuf:"bytes,1,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *EngineVolumeGetProxyResponse) Reset() {
	*x = EngineVolumeGetProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVolumeGetProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVolumeGetProxyResponse) ProtoMessage() {}

func (x *EngineVolumeGetProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVolumeGetProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineVolumeGetProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{2}
}

func (x *EngineVolumeGetProxyResponse) GetVolume() *enginerpc.Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type EngineVolumeExpandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest            `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	Expand             *enginerpc.VolumeExpandRequest `protobuf:"bytes,2,opt,name=expand,proto3" json:"expand,omitempty"`
}

func (x *EngineVolumeExpandRequest) Reset() {
	*x = EngineVolumeExpandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVolumeExpandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVolumeExpandRequest) ProtoMessage() {}

func (x *EngineVolumeExpandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVolumeExpandRequest.ProtoReflect.Descriptor instead.
func (*EngineVolumeExpandRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{3}
}

func (x *EngineVolumeExpandRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineVolumeExpandRequest) GetExpand() *enginerpc.VolumeExpandRequest {
	if x != nil {
		return x.Expand
	}
	return nil
}

type EngineVolumeFrontendStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest                   `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	FrontendStart      *enginerpc.VolumeFrontendStartRequest `protobuf:"bytes,2,opt,name=frontend_start,json=frontendStart,proto3" json:"frontend_start,omitempty"`
}

func (x *EngineVolumeFrontendStartRequest) Reset() {
	*x = EngineVolumeFrontendStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVolumeFrontendStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVolumeFrontendStartRequest) ProtoMessage() {}

func (x *EngineVolumeFrontendStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVolumeFrontendStartRequest.ProtoReflect.Descriptor instead.
func (*EngineVolumeFrontendStartRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{4}
}

func (x *EngineVolumeFrontendStartRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineVolumeFrontendStartRequest) GetFrontendStart() *enginerpc.VolumeFrontendStartRequest {
	if x != nil {
		return x.FrontendStart
	}
	return nil
}

type EngineVolumeSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest              `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	SnapshotVolume     *enginerpc.VolumeSnapshotRequest `protobuf:"bytes,2,opt,name=snapshot_volume,json=snapshotVolume,proto3" json:"snapshot_volume,omitempty"`
}

func (x *EngineVolumeSnapshotRequest) Reset() {
	*x = EngineVolumeSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVolumeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVolumeSnapshotRequest) ProtoMessage() {}

func (x *EngineVolumeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVolumeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*EngineVolumeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{5}
}

func (x *EngineVolumeSnapshotRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineVolumeSnapshotRequest) GetSnapshotVolume() *enginerpc.VolumeSnapshotRequest {
	if x != nil {
		return x.SnapshotVolume
	}
	return nil
}

type EngineVolumeSnapshotProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *enginerpc.VolumeSnapshotReply `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *EngineVolumeSnapshotProxyResponse) Reset() {
	*x = EngineVolumeSnapshotProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVolumeSnapshotProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVolumeSnapshotProxyResponse) ProtoMessage() {}

func (x *EngineVolumeSnapshotProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVolumeSnapshotProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineVolumeSnapshotProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{6}
}

func (x *EngineVolumeSnapshotProxyResponse) GetSnapshot() *enginerpc.VolumeSnapshotReply {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type EngineVolumeUnmapMarkSnapChainRemovedSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest                                  `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	UnmapMarkSnap      *enginerpc.VolumeUnmapMarkSnapChainRemovedSetRequest `protobuf:"bytes,2,opt,name=unmap_mark_snap,json=unmapMarkSnap,proto3" json:"unmap_mark_snap,omitempty"`
}

func (x *EngineVolumeUnmapMarkSnapChainRemovedSetRequest) Reset() {
	*x = EngineVolumeUnmapMarkSnapChainRemovedSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVolumeUnmapMarkSnapChainRemovedSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVolumeUnmapMarkSnapChainRemovedSetRequest) ProtoMessage() {}

func (x *EngineVolumeUnmapMarkSnapChainRemovedSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVolumeUnmapMarkSnapChainRemovedSetRequest.ProtoReflect.Descriptor instead.
func (*EngineVolumeUnmapMarkSnapChainRemovedSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{7}
}

func (x *EngineVolumeUnmapMarkSnapChainRemovedSetRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineVolumeUnmapMarkSnapChainRemovedSetRequest) GetUnmapMarkSnap() *enginerpc.VolumeUnmapMarkSnapChainRemovedSetRequest {
	if x != nil {
		return x.UnmapMarkSnap
	}
	return nil
}

type EngineVolumeSnapshotMaxCountSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest                         `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	Count              *enginerpc.VolumeSnapshotMaxCountSetRequest `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *EngineVolumeSnapshotMaxCountSetRequest) Reset() {
	*x = EngineVolumeSnapshotMaxCountSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVolumeSnapshotMaxCountSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVolumeSnapshotMaxCountSetRequest) ProtoMessage() {}

func (x *EngineVolumeSnapshotMaxCountSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVolumeSnapshotMaxCountSetRequest.ProtoReflect.Descriptor instead.
func (*EngineVolumeSnapshotMaxCountSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{8}
}

func (x *EngineVolumeSnapshotMaxCountSetRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineVolumeSnapshotMaxCountSetRequest) GetCount() *enginerpc.VolumeSnapshotMaxCountSetRequest {
	if x != nil {
		return x.Count
	}
	return nil
}

type EngineVolumeSnapshotMaxSizeSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest                        `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	Size               *enginerpc.VolumeSnapshotMaxSizeSetRequest `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *EngineVolumeSnapshotMaxSizeSetRequest) Reset() {
	*x = EngineVolumeSnapshotMaxSizeSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineVolumeSnapshotMaxSizeSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineVolumeSnapshotMaxSizeSetRequest) ProtoMessage() {}

func (x *EngineVolumeSnapshotMaxSizeSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineVolumeSnapshotMaxSizeSetRequest.ProtoReflect.Descriptor instead.
func (*EngineVolumeSnapshotMaxSizeSetRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{9}
}

func (x *EngineVolumeSnapshotMaxSizeSetRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineVolumeSnapshotMaxSizeSetRequest) GetSize() *enginerpc.VolumeSnapshotMaxSizeSetRequest {
	if x != nil {
		return x.Size
	}
	return nil
}

type EngineSnapshotListProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks map[string]*EngineSnapshotDiskInfo `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EngineSnapshotListProxyResponse) Reset() {
	*x = EngineSnapshotListProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotListProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotListProxyResponse) ProtoMessage() {}

func (x *EngineSnapshotListProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotListProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineSnapshotListProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{10}
}

func (x *EngineSnapshotListProxyResponse) GetDisks() map[string]*EngineSnapshotDiskInfo {
	if x != nil {
		return x.Disks
	}
	return nil
}

type EngineSnapshotDiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent      string            `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Children    map[string]bool   `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Removed     bool              `protobuf:"varint,4,opt,name=removed,proto3" json:"removed,omitempty"`
	UserCreated bool              `protobuf:"varint,5,opt,name=user_created,json=userCreated,proto3" json:"user_created,omitempty"`
	Created     string            `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	Size        string            `protobuf:"bytes,7,opt,name=size,proto3" json:"size,omitempty"`
	Labels      map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EngineSnapshotDiskInfo) Reset() {
	*x = EngineSnapshotDiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotDiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotDiskInfo) ProtoMessage() {}

func (x *EngineSnapshotDiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotDiskInfo.ProtoReflect.Descriptor instead.
func (*EngineSnapshotDiskInfo) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{11}
}

func (x *EngineSnapshotDiskInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EngineSnapshotDiskInfo) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *EngineSnapshotDiskInfo) GetChildren() map[string]bool {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *EngineSnapshotDiskInfo) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *EngineSnapshotDiskInfo) GetUserCreated() bool {
	if x != nil {
		return x.UserCreated
	}
	return false
}

func (x *EngineSnapshotDiskInfo) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *EngineSnapshotDiskInfo) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *EngineSnapshotDiskInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type EngineSnapshotRevertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	Name               string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EngineSnapshotRevertRequest) Reset() {
	*x = EngineSnapshotRevertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotRevertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotRevertRequest) ProtoMessage() {}

func (x *EngineSnapshotRevertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotRevertRequest.ProtoReflect.Descriptor instead.
func (*EngineSnapshotRevertRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{12}
}

func (x *EngineSnapshotRevertRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineSnapshotRevertRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EngineSnapshotPurgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	SkipIfInProgress   bool                `protobuf:"varint,2,opt,name=skip_if_in_progress,json=skipIfInProgress,proto3" json:"skip_if_in_progress,omitempty"`
}

func (x *EngineSnapshotPurgeRequest) Reset() {
	*x = EngineSnapshotPurgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotPurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotPurgeRequest) ProtoMessage() {}

func (x *EngineSnapshotPurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotPurgeRequest.ProtoReflect.Descriptor instead.
func (*EngineSnapshotPurgeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{13}
}

func (x *EngineSnapshotPurgeRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineSnapshotPurgeRequest) GetSkipIfInProgress() bool {
	if x != nil {
		return x.SkipIfInProgress
	}
	return false
}

type EngineSnapshotPurgeStatusProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]*enginerpc.SnapshotPurgeStatusResponse `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EngineSnapshotPurgeStatusProxyResponse) Reset() {
	*x = EngineSnapshotPurgeStatusProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotPurgeStatusProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotPurgeStatusProxyResponse) ProtoMessage() {}

func (x *EngineSnapshotPurgeStatusProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotPurgeStatusProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineSnapshotPurgeStatusProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{14}
}

func (x *EngineSnapshotPurgeStatusProxyResponse) GetStatus() map[string]*enginerpc.SnapshotPurgeStatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

type EngineSnapshotCloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest        *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	FromEngineAddress         string              `protobuf:"bytes,2,opt,name=from_engine_address,json=fromEngineAddress,proto3" json:"from_engine_address,omitempty"`
	SnapshotName              string              `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	ExportBackingImageIfExist bool                `protobuf:"varint,4,opt,name=export_backing_image_if_exist,json=exportBackingImageIfExist,proto3" json:"export_backing_image_if_exist,omitempty"`
	FileSyncHttpClientTimeout int32               `protobuf:"varint,5,opt,name=file_sync_http_client_timeout,json=fileSyncHttpClientTimeout,proto3" json:"file_sync_http_client_timeout,omitempty"`
	FromEngineName            string              `protobuf:"bytes,6,opt,name=from_engine_name,json=fromEngineName,proto3" json:"from_engine_name,omitempty"`
	FromVolumeName            string              `protobuf:"bytes,7,opt,name=from_volume_name,json=fromVolumeName,proto3" json:"from_volume_name,omitempty"`
}

func (x *EngineSnapshotCloneRequest) Reset() {
	*x = EngineSnapshotCloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotCloneRequest) ProtoMessage() {}

func (x *EngineSnapshotCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotCloneRequest.ProtoReflect.Descriptor instead.
func (*EngineSnapshotCloneRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{15}
}

func (x *EngineSnapshotCloneRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineSnapshotCloneRequest) GetFromEngineAddress() string {
	if x != nil {
		return x.FromEngineAddress
	}
	return ""
}

func (x *EngineSnapshotCloneRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *EngineSnapshotCloneRequest) GetExportBackingImageIfExist() bool {
	if x != nil {
		return x.ExportBackingImageIfExist
	}
	return false
}

func (x *EngineSnapshotCloneRequest) GetFileSyncHttpClientTimeout() int32 {
	if x != nil {
		return x.FileSyncHttpClientTimeout
	}
	return 0
}

func (x *EngineSnapshotCloneRequest) GetFromEngineName() string {
	if x != nil {
		return x.FromEngineName
	}
	return ""
}

func (x *EngineSnapshotCloneRequest) GetFromVolumeName() string {
	if x != nil {
		return x.FromVolumeName
	}
	return ""
}

type EngineSnapshotCloneStatusProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]*enginerpc.SnapshotCloneStatusResponse `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EngineSnapshotCloneStatusProxyResponse) Reset() {
	*x = EngineSnapshotCloneStatusProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotCloneStatusProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotCloneStatusProxyResponse) ProtoMessage() {}

func (x *EngineSnapshotCloneStatusProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotCloneStatusProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineSnapshotCloneStatusProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{16}
}

func (x *EngineSnapshotCloneStatusProxyResponse) GetStatus() map[string]*enginerpc.SnapshotCloneStatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

type EngineSnapshotRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	Names              []string            `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *EngineSnapshotRemoveRequest) Reset() {
	*x = EngineSnapshotRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotRemoveRequest) ProtoMessage() {}

func (x *EngineSnapshotRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotRemoveRequest.ProtoReflect.Descriptor instead.
func (*EngineSnapshotRemoveRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{17}
}

func (x *EngineSnapshotRemoveRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineSnapshotRemoveRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type EngineSnapshotBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest   *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	Envs                 []string            `protobuf:"bytes,8,rep,name=envs,proto3" json:"envs,omitempty"`
	BackupName           string              `protobuf:"bytes,2,opt,name=backup_name,json=backupName,proto3" json:"backup_name,omitempty"`
	SnapshotName         string              `protobuf:"bytes,3,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	BackupTarget         string              `protobuf:"bytes,4,opt,name=backup_target,json=backupTarget,proto3" json:"backup_target,omitempty"`
	BackingImageName     string              `protobuf:"bytes,5,opt,name=backing_image_name,json=backingImageName,proto3" json:"backing_image_name,omitempty"`
	BackingImageChecksum string              `protobuf:"bytes,6,opt,name=backing_image_checksum,json=backingImageChecksum,proto3" json:"backing_image_checksum,omitempty"`
	Labels               map[string]string   `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CompressionMethod    string              `protobuf:"bytes,9,opt,name=compression_method,json=compressionMethod,proto3" json:"compression_method,omitempty"`
	ConcurrentLimit      int32               `protobuf:"varint,10,opt,name=concurrent_limit,json=concurrentLimit,proto3" json:"concurrent_limit,omitempty"`
	StorageClassName     string              `protobuf:"bytes,11,opt,name=storage_class_name,json=storageClassName,proto3" json:"storage_class_name,omitempty"`
}

func (x *EngineSnapshotBackupRequest) Reset() {
	*x = EngineSnapshotBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotBackupRequest) ProtoMessage() {}

func (x *EngineSnapshotBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotBackupRequest.ProtoReflect.Descriptor instead.
func (*EngineSnapshotBackupRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{18}
}

func (x *EngineSnapshotBackupRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineSnapshotBackupRequest) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *EngineSnapshotBackupRequest) GetBackupName() string {
	if x != nil {
		return x.BackupName
	}
	return ""
}

func (x *EngineSnapshotBackupRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *EngineSnapshotBackupRequest) GetBackupTarget() string {
	if x != nil {
		return x.BackupTarget
	}
	return ""
}

func (x *EngineSnapshotBackupRequest) GetBackingImageName() string {
	if x != nil {
		return x.BackingImageName
	}
	return ""
}

func (x *EngineSnapshotBackupRequest) GetBackingImageChecksum() string {
	if x != nil {
		return x.BackingImageChecksum
	}
	return ""
}

func (x *EngineSnapshotBackupRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EngineSnapshotBackupRequest) GetCompressionMethod() string {
	if x != nil {
		return x.CompressionMethod
	}
	return ""
}

func (x *EngineSnapshotBackupRequest) GetConcurrentLimit() int32 {
	if x != nil {
		return x.ConcurrentLimit
	}
	return 0
}

func (x *EngineSnapshotBackupRequest) GetStorageClassName() string {
	if x != nil {
		return x.StorageClassName
	}
	return ""
}

type EngineSnapshotBackupProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupId      string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	Replica       string `protobuf:"bytes,2,opt,name=replica,proto3" json:"replica,omitempty"`
	IsIncremental bool   `protobuf:"varint,3,opt,name=is_incremental,json=isIncremental,proto3" json:"is_incremental,omitempty"`
}

func (x *EngineSnapshotBackupProxyResponse) Reset() {
	*x = EngineSnapshotBackupProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotBackupProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotBackupProxyResponse) ProtoMessage() {}

func (x *EngineSnapshotBackupProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotBackupProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineSnapshotBackupProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{19}
}

func (x *EngineSnapshotBackupProxyResponse) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *EngineSnapshotBackupProxyResponse) GetReplica() string {
	if x != nil {
		return x.Replica
	}
	return ""
}

func (x *EngineSnapshotBackupProxyResponse) GetIsIncremental() bool {
	if x != nil {
		return x.IsIncremental
	}
	return false
}

type EngineSnapshotBackupStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	BackupName         string              `protobuf:"bytes,2,opt,name=backup_name,json=backupName,proto3" json:"backup_name,omitempty"`
	ReplicaAddress     string              `protobuf:"bytes,3,opt,name=replica_address,json=replicaAddress,proto3" json:"replica_address,omitempty"`
	ReplicaName        string              `protobuf:"bytes,4,opt,name=replica_name,json=replicaName,proto3" json:"replica_name,omitempty"`
}

func (x *EngineSnapshotBackupStatusRequest) Reset() {
	*x = EngineSnapshotBackupStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotBackupStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotBackupStatusRequest) ProtoMessage() {}

func (x *EngineSnapshotBackupStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotBackupStatusRequest.ProtoReflect.Descriptor instead.
func (*EngineSnapshotBackupStatusRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{20}
}

func (x *EngineSnapshotBackupStatusRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineSnapshotBackupStatusRequest) GetBackupName() string {
	if x != nil {
		return x.BackupName
	}
	return ""
}

func (x *EngineSnapshotBackupStatusRequest) GetReplicaAddress() string {
	if x != nil {
		return x.ReplicaAddress
	}
	return ""
}

func (x *EngineSnapshotBackupStatusRequest) GetReplicaName() string {
	if x != nil {
		return x.ReplicaName
	}
	return ""
}

type EngineSnapshotBackupStatusProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupUrl      string `protobuf:"bytes,1,opt,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
	Error          string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Progress       int32  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	SnapshotName   string `protobuf:"bytes,4,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	State          string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	ReplicaAddress string `protobuf:"bytes,6,opt,name=replica_address,json=replicaAddress,proto3" json:"replica_address,omitempty"`
}

func (x *EngineSnapshotBackupStatusProxyResponse) Reset() {
	*x = EngineSnapshotBackupStatusProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotBackupStatusProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotBackupStatusProxyResponse) ProtoMessage() {}

func (x *EngineSnapshotBackupStatusProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotBackupStatusProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineSnapshotBackupStatusProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{21}
}

func (x *EngineSnapshotBackupStatusProxyResponse) GetBackupUrl() string {
	if x != nil {
		return x.BackupUrl
	}
	return ""
}

func (x *EngineSnapshotBackupStatusProxyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EngineSnapshotBackupStatusProxyResponse) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *EngineSnapshotBackupStatusProxyResponse) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *EngineSnapshotBackupStatusProxyResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *EngineSnapshotBackupStatusProxyResponse) GetReplicaAddress() string {
	if x != nil {
		return x.ReplicaAddress
	}
	return ""
}

type EngineBackupRestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	Envs               []string            `protobuf:"bytes,2,rep,name=envs,proto3" json:"envs,omitempty"`
	Url                string              `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Target             string              `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	VolumeName         string              `protobuf:"bytes,5,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	ConcurrentLimit    int32               `protobuf:"varint,6,opt,name=concurrent_limit,json=concurrentLimit,proto3" json:"concurrent_limit,omitempty"`
}

func (x *EngineBackupRestoreRequest) Reset() {
	*x = EngineBackupRestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineBackupRestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineBackupRestoreRequest) ProtoMessage() {}

func (x *EngineBackupRestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineBackupRestoreRequest.ProtoReflect.Descriptor instead.
func (*EngineBackupRestoreRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{22}
}

func (x *EngineBackupRestoreRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineBackupRestoreRequest) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *EngineBackupRestoreRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EngineBackupRestoreRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *EngineBackupRestoreRequest) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *EngineBackupRestoreRequest) GetConcurrentLimit() int32 {
	if x != nil {
		return x.ConcurrentLimit
	}
	return 0
}

type EngineBackupRestoreProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskError []byte `protobuf:"bytes,1,opt,name=taskError,proto3" json:"taskError,omitempty"`
}

func (x *EngineBackupRestoreProxyResponse) Reset() {
	*x = EngineBackupRestoreProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineBackupRestoreProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineBackupRestoreProxyResponse) ProtoMessage() {}

func (x *EngineBackupRestoreProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineBackupRestoreProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineBackupRestoreProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{23}
}

func (x *EngineBackupRestoreProxyResponse) GetTaskError() []byte {
	if x != nil {
		return x.TaskError
	}
	return nil
}

type EngineBackupRestoreStatusProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]*EngineBackupRestoreStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EngineBackupRestoreStatusProxyResponse) Reset() {
	*x = EngineBackupRestoreStatusProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineBackupRestoreStatusProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineBackupRestoreStatusProxyResponse) ProtoMessage() {}

func (x *EngineBackupRestoreStatusProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineBackupRestoreStatusProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineBackupRestoreStatusProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{24}
}

func (x *EngineBackupRestoreStatusProxyResponse) GetStatus() map[string]*EngineBackupRestoreStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type EngineBackupRestoreStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRestoring            bool   `protobuf:"varint,1,opt,name=is_restoring,json=isRestoring,proto3" json:"is_restoring,omitempty"`
	LastRestored           string `protobuf:"bytes,2,opt,name=last_restored,json=lastRestored,proto3" json:"last_restored,omitempty"`
	CurrentRestoringBackup string `protobuf:"bytes,3,opt,name=current_restoring_backup,json=currentRestoringBackup,proto3" json:"current_restoring_backup,omitempty"`
	Progress               int32  `protobuf:"varint,4,opt,name=progress,proto3" json:"progress,omitempty"`
	Error                  string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	Filename               string `protobuf:"bytes,6,opt,name=filename,proto3" json:"filename,omitempty"`
	State                  string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	BackupUrl              string `protobuf:"bytes,8,opt,name=backup_url,json=backupUrl,proto3" json:"backup_url,omitempty"`
}

func (x *EngineBackupRestoreStatus) Reset() {
	*x = EngineBackupRestoreStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineBackupRestoreStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineBackupRestoreStatus) ProtoMessage() {}

func (x *EngineBackupRestoreStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineBackupRestoreStatus.ProtoReflect.Descriptor instead.
func (*EngineBackupRestoreStatus) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{25}
}

func (x *EngineBackupRestoreStatus) GetIsRestoring() bool {
	if x != nil {
		return x.IsRestoring
	}
	return false
}

func (x *EngineBackupRestoreStatus) GetLastRestored() string {
	if x != nil {
		return x.LastRestored
	}
	return ""
}

func (x *EngineBackupRestoreStatus) GetCurrentRestoringBackup() string {
	if x != nil {
		return x.CurrentRestoringBackup
	}
	return ""
}

func (x *EngineBackupRestoreStatus) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *EngineBackupRestoreStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EngineBackupRestoreStatus) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *EngineBackupRestoreStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *EngineBackupRestoreStatus) GetBackupUrl() string {
	if x != nil {
		return x.BackupUrl
	}
	return ""
}

type EngineBackupRestoreFinishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
}

func (x *EngineBackupRestoreFinishRequest) Reset() {
	*x = EngineBackupRestoreFinishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineBackupRestoreFinishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineBackupRestoreFinishRequest) ProtoMessage() {}

func (x *EngineBackupRestoreFinishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineBackupRestoreFinishRequest.ProtoReflect.Descriptor instead.
func (*EngineBackupRestoreFinishRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{26}
}

func (x *EngineBackupRestoreFinishRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

type EngineReplicaAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest        *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	ReplicaAddress            string              `protobuf:"bytes,2,opt,name=replica_address,json=replicaAddress,proto3" json:"replica_address,omitempty"`
	Restore                   bool                `protobuf:"varint,3,opt,name=restore,proto3" json:"restore,omitempty"`
	Size                      int64               `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	CurrentSize               int64               `protobuf:"varint,5,opt,name=current_size,json=currentSize,proto3" json:"current_size,omitempty"`
	FastSync                  bool                `protobuf:"varint,6,opt,name=fast_sync,json=fastSync,proto3" json:"fast_sync,omitempty"`
	FileSyncHttpClientTimeout int32               `protobuf:"varint,7,opt,name=file_sync_http_client_timeout,json=fileSyncHttpClientTimeout,proto3" json:"file_sync_http_client_timeout,omitempty"`
	ReplicaName               string              `protobuf:"bytes,8,opt,name=replica_name,json=replicaName,proto3" json:"replica_name,omitempty"`
}

func (x *EngineReplicaAddRequest) Reset() {
	*x = EngineReplicaAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineReplicaAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineReplicaAddRequest) ProtoMessage() {}

func (x *EngineReplicaAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineReplicaAddRequest.ProtoReflect.Descriptor instead.
func (*EngineReplicaAddRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{27}
}

func (x *EngineReplicaAddRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineReplicaAddRequest) GetReplicaAddress() string {
	if x != nil {
		return x.ReplicaAddress
	}
	return ""
}

func (x *EngineReplicaAddRequest) GetRestore() bool {
	if x != nil {
		return x.Restore
	}
	return false
}

func (x *EngineReplicaAddRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *EngineReplicaAddRequest) GetCurrentSize() int64 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

func (x *EngineReplicaAddRequest) GetFastSync() bool {
	if x != nil {
		return x.FastSync
	}
	return false
}

func (x *EngineReplicaAddRequest) GetFileSyncHttpClientTimeout() int32 {
	if x != nil {
		return x.FileSyncHttpClientTimeout
	}
	return 0
}

func (x *EngineReplicaAddRequest) GetReplicaName() string {
	if x != nil {
		return x.ReplicaName
	}
	return ""
}

type EngineReplicaListProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaList *enginerpc.ReplicaListReply `protobuf:"bytes,1,opt,name=replica_list,json=replicaList,proto3" json:"replica_list,omitempty"`
}

func (x *EngineReplicaListProxyResponse) Reset() {
	*x = EngineReplicaListProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineReplicaListProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineReplicaListProxyResponse) ProtoMessage() {}

func (x *EngineReplicaListProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineReplicaListProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineReplicaListProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{28}
}

func (x *EngineReplicaListProxyResponse) GetReplicaList() *enginerpc.ReplicaListReply {
	if x != nil {
		return x.ReplicaList
	}
	return nil
}

type EngineReplicaVerifyRebuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	ReplicaAddress     string              `protobuf:"bytes,2,opt,name=replica_address,json=replicaAddress,proto3" json:"replica_address,omitempty"`
	ReplicaName        string              `protobuf:"bytes,3,opt,name=replica_name,json=replicaName,proto3" json:"replica_name,omitempty"`
}

func (x *EngineReplicaVerifyRebuildRequest) Reset() {
	*x = EngineReplicaVerifyRebuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineReplicaVerifyRebuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineReplicaVerifyRebuildRequest) ProtoMessage() {}

func (x *EngineReplicaVerifyRebuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineReplicaVerifyRebuildRequest.ProtoReflect.Descriptor instead.
func (*EngineReplicaVerifyRebuildRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{29}
}

func (x *EngineReplicaVerifyRebuildRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineReplicaVerifyRebuildRequest) GetReplicaAddress() string {
	if x != nil {
		return x.ReplicaAddress
	}
	return ""
}

func (x *EngineReplicaVerifyRebuildRequest) GetReplicaName() string {
	if x != nil {
		return x.ReplicaName
	}
	return ""
}

type EngineReplicaRebuildStatusProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]*enginerpc.ReplicaRebuildStatusResponse `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EngineReplicaRebuildStatusProxyResponse) Reset() {
	*x = EngineReplicaRebuildStatusProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineReplicaRebuildStatusProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineReplicaRebuildStatusProxyResponse) ProtoMessage() {}

func (x *EngineReplicaRebuildStatusProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineReplicaRebuildStatusProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineReplicaRebuildStatusProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{30}
}

func (x *EngineReplicaRebuildStatusProxyResponse) GetStatus() map[string]*enginerpc.ReplicaRebuildStatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

type EngineReplicaRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	ReplicaAddress     string              `protobuf:"bytes,2,opt,name=replica_address,json=replicaAddress,proto3" json:"replica_address,omitempty"`
	ReplicaName        string              `protobuf:"bytes,3,opt,name=replica_name,json=replicaName,proto3" json:"replica_name,omitempty"`
}

func (x *EngineReplicaRemoveRequest) Reset() {
	*x = EngineReplicaRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineReplicaRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineReplicaRemoveRequest) ProtoMessage() {}

func (x *EngineReplicaRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineReplicaRemoveRequest.ProtoReflect.Descriptor instead.
func (*EngineReplicaRemoveRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{31}
}

func (x *EngineReplicaRemoveRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineReplicaRemoveRequest) GetReplicaAddress() string {
	if x != nil {
		return x.ReplicaAddress
	}
	return ""
}

func (x *EngineReplicaRemoveRequest) GetReplicaName() string {
	if x != nil {
		return x.ReplicaName
	}
	return ""
}

type EngineReplicaModeUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest   `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	ReplicaAddress     string                `protobuf:"bytes,2,opt,name=replica_address,json=replicaAddress,proto3" json:"replica_address,omitempty"`
	Mode               enginerpc.ReplicaMode `protobuf:"varint,3,opt,name=mode,proto3,enum=pkg.enginerpc.ReplicaMode" json:"mode,omitempty"`
}

func (x *EngineReplicaModeUpdateRequest) Reset() {
	*x = EngineReplicaModeUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineReplicaModeUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineReplicaModeUpdateRequest) ProtoMessage() {}

func (x *EngineReplicaModeUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineReplicaModeUpdateRequest.ProtoReflect.Descriptor instead.
func (*EngineReplicaModeUpdateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{32}
}

func (x *EngineReplicaModeUpdateRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineReplicaModeUpdateRequest) GetReplicaAddress() string {
	if x != nil {
		return x.ReplicaAddress
	}
	return ""
}

func (x *EngineReplicaModeUpdateRequest) GetMode() enginerpc.ReplicaMode {
	if x != nil {
		return x.Mode
	}
	return enginerpc.ReplicaMode_WO
}

type EngineSnapshotHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	SnapshotName       string              `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
	Rehash             bool                `protobuf:"varint,3,opt,name=rehash,proto3" json:"rehash,omitempty"`
}

func (x *EngineSnapshotHashRequest) Reset() {
	*x = EngineSnapshotHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotHashRequest) ProtoMessage() {}

func (x *EngineSnapshotHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotHashRequest.ProtoReflect.Descriptor instead.
func (*EngineSnapshotHashRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{33}
}

func (x *EngineSnapshotHashRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineSnapshotHashRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

func (x *EngineSnapshotHashRequest) GetRehash() bool {
	if x != nil {
		return x.Rehash
	}
	return false
}

type EngineSnapshotHashStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProxyEngineRequest *ProxyEngineRequest `protobuf:"bytes,1,opt,name=proxy_engine_request,json=proxyEngineRequest,proto3" json:"proxy_engine_request,omitempty"`
	SnapshotName       string              `protobuf:"bytes,2,opt,name=snapshot_name,json=snapshotName,proto3" json:"snapshot_name,omitempty"`
}

func (x *EngineSnapshotHashStatusRequest) Reset() {
	*x = EngineSnapshotHashStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotHashStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotHashStatusRequest) ProtoMessage() {}

func (x *EngineSnapshotHashStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotHashStatusRequest.ProtoReflect.Descriptor instead.
func (*EngineSnapshotHashStatusRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{34}
}

func (x *EngineSnapshotHashStatusRequest) GetProxyEngineRequest() *ProxyEngineRequest {
	if x != nil {
		return x.ProxyEngineRequest
	}
	return nil
}

func (x *EngineSnapshotHashStatusRequest) GetSnapshotName() string {
	if x != nil {
		return x.SnapshotName
	}
	return ""
}

type EngineSnapshotHashStatusProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]*enginerpc.SnapshotHashStatusResponse `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EngineSnapshotHashStatusProxyResponse) Reset() {
	*x = EngineSnapshotHashStatusProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineSnapshotHashStatusProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSnapshotHashStatusProxyResponse) ProtoMessage() {}

func (x *EngineSnapshotHashStatusProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSnapshotHashStatusProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineSnapshotHashStatusProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{35}
}

func (x *EngineSnapshotHashStatusProxyResponse) GetStatus() map[string]*enginerpc.SnapshotHashStatusResponse {
	if x != nil {
		return x.Status
	}
	return nil
}

type EngineMetricsGetProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics *enginerpc.Metrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *EngineMetricsGetProxyResponse) Reset() {
	*x = EngineMetricsGetProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineMetricsGetProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineMetricsGetProxyResponse) ProtoMessage() {}

func (x *EngineMetricsGetProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineMetricsGetProxyResponse.ProtoReflect.Descriptor instead.
func (*EngineMetricsGetProxyResponse) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{36}
}

func (x *EngineMetricsGetProxyResponse) GetMetrics() *enginerpc.Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type RemountVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName string `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
}

func (x *RemountVolumeRequest) Reset() {
	*x = RemountVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_imrpc_proxy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemountVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemountVolumeRequest) ProtoMessage() {}

func (x *RemountVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_imrpc_proxy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemountVolumeRequest.ProtoReflect.Descriptor instead.
func (*RemountVolumeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_imrpc_proxy_proto_rawDescGZIP(), []int{37}
}

func (x *RemountVolumeRequest) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

var File_pkg_imrpc_proxy_proto protoreflect.FileDescriptor

var file_pkg_imrpc_proxy_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72,
	0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x70, 0x6b, 0x67, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2f, 0x73,
	0x79, 0x6e, 0x63, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0x54, 0x0a, 0x1a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x1c,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x19,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0xbd,
	0x01, 0x0a, 0x1b, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x63,
	0x0a, 0x21, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x2f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x75, 0x6e, 0x6d, 0x61,
	0x70, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72,
	0x6b, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x22, 0xc0, 0x01, 0x0a, 0x26, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x01,
	0x0a, 0x25, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xcb, 0x01, 0x0a,
	0x1f, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x1a, 0x5b, 0x0a,
	0x0a, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x03, 0x0a, 0x16, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01,
	0x0a, 0x1a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70,
	0x49, 0x66, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe6, 0x01, 0x0a,
	0x26, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x65,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x03, 0x0a, 0x1a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x1d,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x26, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x65, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x01, 0x0a, 0x1b,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0xe0, 0x04, 0x0a, 0x1b, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x21, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x01,
	0x0a, 0x27, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf7,
	0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e,
	0x76, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x40, 0x0a, 0x20, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x26, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x5f, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa0, 0x02,
	0x0a, 0x19, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x55, 0x72, 0x6c,
	0x22, 0x73, 0x0a, 0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x17, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x66, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x40, 0x0a, 0x1d, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64,
	0x0a, 0x1e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x21, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x27, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x66, 0x0a, 0x0b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x1e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x01, 0x0a,
	0x19, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x68, 0x61, 0x73, 0x68, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x25, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x64, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x1d, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x37, 0x0a, 0x14, 0x52,
	0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x32, 0xb9, 0x17, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12,
	0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2b, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x16, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1d,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x78, 0x0a, 0x22, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55,
	0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x66, 0x0a, 0x19, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x18, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x66, 0x0a,
	0x0e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x26, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x67, 0x0a, 0x13, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x75,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x75, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x13, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x72, 0x0a, 0x12, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x14, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0d, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x67, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12,
	0x2b, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x48, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x12, 0x22,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69,
	0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x2c, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x25, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x56, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x69, 0x6d,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x6f, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x6e, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x6e,
	0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69,
	0x6d, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_imrpc_proxy_proto_rawDescOnce sync.Once
	file_pkg_imrpc_proxy_proto_rawDescData = file_pkg_imrpc_proxy_proto_rawDesc
)

func file_pkg_imrpc_proxy_proto_rawDescGZIP() []byte {
	file_pkg_imrpc_proxy_proto_rawDescOnce.Do(func() {
		file_pkg_imrpc_proxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_imrpc_proxy_proto_rawDescData)
	})
	return file_pkg_imrpc_proxy_proto_rawDescData
}

var file_pkg_imrpc_proxy_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_pkg_imrpc_proxy_proto_goTypes = []interface{}{
	(*ProxyEngineRequest)(nil),                                  // 0: pkg.imrpc.ProxyEngineRequest
	(*EngineVersionProxyResponse)(nil),                          // 1: pkg.imrpc.EngineVersionProxyResponse
	(*EngineVolumeGetProxyResponse)(nil),                        // 2: pkg.imrpc.EngineVolumeGetProxyResponse
	(*EngineVolumeExpandRequest)(nil),                           // 3: pkg.imrpc.EngineVolumeExpandRequest
	(*EngineVolumeFrontendStartRequest)(nil),                    // 4: pkg.imrpc.EngineVolumeFrontendStartRequest
	(*EngineVolumeSnapshotRequest)(nil),                         // 5: pkg.imrpc.EngineVolumeSnapshotRequest
	(*EngineVolumeSnapshotProxyResponse)(nil),                   // 6: pkg.imrpc.EngineVolumeSnapshotProxyResponse
	(*EngineVolumeUnmapMarkSnapChainRemovedSetRequest)(nil),     // 7: pkg.imrpc.EngineVolumeUnmapMarkSnapChainRemovedSetRequest
	(*EngineVolumeSnapshotMaxCountSetRequest)(nil),              // 8: pkg.imrpc.EngineVolumeSnapshotMaxCountSetRequest
	(*EngineVolumeSnapshotMaxSizeSetRequest)(nil),               // 9: pkg.imrpc.EngineVolumeSnapshotMaxSizeSetRequest
	(*EngineSnapshotListProxyResponse)(nil),                     // 10: pkg.imrpc.EngineSnapshotListProxyResponse
	(*EngineSnapshotDiskInfo)(nil),                              // 11: pkg.imrpc.EngineSnapshotDiskInfo
	(*EngineSnapshotRevertRequest)(nil),                         // 12: pkg.imrpc.EngineSnapshotRevertRequest
	(*EngineSnapshotPurgeRequest)(nil),                          // 13: pkg.imrpc.EngineSnapshotPurgeRequest
	(*EngineSnapshotPurgeStatusProxyResponse)(nil),              // 14: pkg.imrpc.EngineSnapshotPurgeStatusProxyResponse
	(*EngineSnapshotCloneRequest)(nil),                          // 15: pkg.imrpc.EngineSnapshotCloneRequest
	(*EngineSnapshotCloneStatusProxyResponse)(nil),              // 16: pkg.imrpc.EngineSnapshotCloneStatusProxyResponse
	(*EngineSnapshotRemoveRequest)(nil),                         // 17: pkg.imrpc.EngineSnapshotRemoveRequest
	(*EngineSnapshotBackupRequest)(nil),                         // 18: pkg.imrpc.EngineSnapshotBackupRequest
	(*EngineSnapshotBackupProxyResponse)(nil),                   // 19: pkg.imrpc.EngineSnapshotBackupProxyResponse
	(*EngineSnapshotBackupStatusRequest)(nil),                   // 20: pkg.imrpc.EngineSnapshotBackupStatusRequest
	(*EngineSnapshotBackupStatusProxyResponse)(nil),             // 21: pkg.imrpc.EngineSnapshotBackupStatusProxyResponse
	(*EngineBackupRestoreRequest)(nil),                          // 22: pkg.imrpc.EngineBackupRestoreRequest
	(*EngineBackupRestoreProxyResponse)(nil),                    // 23: pkg.imrpc.EngineBackupRestoreProxyResponse
	(*EngineBackupRestoreStatusProxyResponse)(nil),              // 24: pkg.imrpc.EngineBackupRestoreStatusProxyResponse
	(*EngineBackupRestoreStatus)(nil),                           // 25: pkg.imrpc.EngineBackupRestoreStatus
	(*EngineBackupRestoreFinishRequest)(nil),                    // 26: pkg.imrpc.EngineBackupRestoreFinishRequest
	(*EngineReplicaAddRequest)(nil),                             // 27: pkg.imrpc.EngineReplicaAddRequest
	(*EngineReplicaListProxyResponse)(nil),                      // 28: pkg.imrpc.EngineReplicaListProxyResponse
	(*EngineReplicaVerifyRebuildRequest)(nil),                   // 29: pkg.imrpc.EngineReplicaVerifyRebuildRequest
	(*EngineReplicaRebuildStatusProxyResponse)(nil),             // 30: pkg.imrpc.EngineReplicaRebuildStatusProxyResponse
	(*EngineReplicaRemoveRequest)(nil),                          // 31: pkg.imrpc.EngineReplicaRemoveRequest
	(*EngineReplicaModeUpdateRequest)(nil),                      // 32: pkg.imrpc.EngineReplicaModeUpdateRequest
	(*EngineSnapshotHashRequest)(nil),                           // 33: pkg.imrpc.EngineSnapshotHashRequest
	(*EngineSnapshotHashStatusRequest)(nil),                     // 34: pkg.imrpc.EngineSnapshotHashStatusRequest
	(*EngineSnapshotHashStatusProxyResponse)(nil),               // 35: pkg.imrpc.EngineSnapshotHashStatusProxyResponse
	(*EngineMetricsGetProxyResponse)(nil),                       // 36: pkg.imrpc.EngineMetricsGetProxyResponse
	(*RemountVolumeRequest)(nil),                                // 37: pkg.imrpc.RemountVolumeRequest
	nil,                                                         // 38: pkg.imrpc.EngineSnapshotListProxyResponse.DisksEntry
	nil,                                                         // 39: pkg.imrpc.EngineSnapshotDiskInfo.ChildrenEntry
	nil,                                                         // 40: pkg.imrpc.EngineSnapshotDiskInfo.LabelsEntry
	nil,                                                         // 41: pkg.imrpc.EngineSnapshotPurgeStatusProxyResponse.StatusEntry
	nil,                                                         // 42: pkg.imrpc.EngineSnapshotCloneStatusProxyResponse.StatusEntry
	nil,                                                         // 43: pkg.imrpc.EngineSnapshotBackupRequest.LabelsEntry
	nil,                                                         // 44: pkg.imrpc.EngineBackupRestoreStatusProxyResponse.StatusEntry
	nil,                                                         // 45: pkg.imrpc.EngineReplicaRebuildStatusProxyResponse.StatusEntry
	nil,                                                         // 46: pkg.imrpc.EngineSnapshotHashStatusProxyResponse.StatusEntry
	(BackendStoreDriver)(0),                                     // 47: pkg.imrpc.BackendStoreDriver
	(DataEngine)(0),                                             // 48: pkg.imrpc.DataEngine
	(*enginerpc.VersionOutput)(nil),                             // 49: pkg.enginerpc.VersionOutput
	(*enginerpc.Volume)(nil),                                    // 50: pkg.enginerpc.Volume
	(*enginerpc.VolumeExpandRequest)(nil),                       // 51: pkg.enginerpc.VolumeExpandRequest
	(*enginerpc.VolumeFrontendStartRequest)(nil),                // 52: pkg.enginerpc.VolumeFrontendStartRequest
	(*enginerpc.VolumeSnapshotRequest)(nil),                     // 53: pkg.enginerpc.VolumeSnapshotRequest
	(*enginerpc.VolumeSnapshotReply)(nil),                       // 54: pkg.enginerpc.VolumeSnapshotReply
	(*enginerpc.VolumeUnmapMarkSnapChainRemovedSetRequest)(nil), // 55: pkg.enginerpc.VolumeUnmapMarkSnapChainRemovedSetRequest
	(*enginerpc.VolumeSnapshotMaxCountSetRequest)(nil),          // 56: pkg.enginerpc.VolumeSnapshotMaxCountSetRequest
	(*enginerpc.VolumeSnapshotMaxSizeSetRequest)(nil),           // 57: pkg.enginerpc.VolumeSnapshotMaxSizeSetRequest
	(*enginerpc.ReplicaListReply)(nil),                          // 58: pkg.enginerpc.ReplicaListReply
	(enginerpc.ReplicaMode)(0),                                  // 59: pkg.enginerpc.ReplicaMode
	(*enginerpc.Metrics)(nil),                                   // 60: pkg.enginerpc.Metrics
	(*enginerpc.SnapshotPurgeStatusResponse)(nil),               // 61: pkg.enginerpc.SnapshotPurgeStatusResponse
	(*enginerpc.SnapshotCloneStatusResponse)(nil),               // 62: pkg.enginerpc.SnapshotCloneStatusResponse
	(*enginerpc.ReplicaRebuildStatusResponse)(nil),              // 63: pkg.enginerpc.ReplicaRebuildStatusResponse
	(*enginerpc.SnapshotHashStatusResponse)(nil),                // 64: pkg.enginerpc.SnapshotHashStatusResponse
	(*emptypb.Empty)(nil),                                       // 65: google.protobuf.Empty
}
var file_pkg_imrpc_proxy_proto_depIdxs = []int32{
	47, // 0: pkg.imrpc.ProxyEngineRequest.backend_store_driver:type_name -> pkg.imrpc.BackendStoreDriver
	48, // 1: pkg.imrpc.ProxyEngineRequest.data_engine:type_name -> pkg.imrpc.DataEngine
	49, // 2: pkg.imrpc.EngineVersionProxyResponse.version:type_name -> pkg.enginerpc.VersionOutput
	50, // 3: pkg.imrpc.EngineVolumeGetProxyResponse.volume:type_name -> pkg.enginerpc.Volume
	0,  // 4: pkg.imrpc.EngineVolumeExpandRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	51, // 5: pkg.imrpc.EngineVolumeExpandRequest.expand:type_name -> pkg.enginerpc.VolumeExpandRequest
	0,  // 6: pkg.imrpc.EngineVolumeFrontendStartRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	52, // 7: pkg.imrpc.EngineVolumeFrontendStartRequest.frontend_start:type_name -> pkg.enginerpc.VolumeFrontendStartRequest
	0,  // 8: pkg.imrpc.EngineVolumeSnapshotRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	53, // 9: pkg.imrpc.EngineVolumeSnapshotRequest.snapshot_volume:type_name -> pkg.enginerpc.VolumeSnapshotRequest
	54, // 10: pkg.imrpc.EngineVolumeSnapshotProxyResponse.snapshot:type_name -> pkg.enginerpc.VolumeSnapshotReply
	0,  // 11: pkg.imrpc.EngineVolumeUnmapMarkSnapChainRemovedSetRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	55, // 12: pkg.imrpc.EngineVolumeUnmapMarkSnapChainRemovedSetRequest.unmap_mark_snap:type_name -> pkg.enginerpc.VolumeUnmapMarkSnapChainRemovedSetRequest
	0,  // 13: pkg.imrpc.EngineVolumeSnapshotMaxCountSetRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	56, // 14: pkg.imrpc.EngineVolumeSnapshotMaxCountSetRequest.count:type_name -> pkg.enginerpc.VolumeSnapshotMaxCountSetRequest
	0,  // 15: pkg.imrpc.EngineVolumeSnapshotMaxSizeSetRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	57, // 16: pkg.imrpc.EngineVolumeSnapshotMaxSizeSetRequest.size:type_name -> pkg.enginerpc.VolumeSnapshotMaxSizeSetRequest
	38, // 17: pkg.imrpc.EngineSnapshotListProxyResponse.disks:type_name -> pkg.imrpc.EngineSnapshotListProxyResponse.DisksEntry
	39, // 18: pkg.imrpc.EngineSnapshotDiskInfo.children:type_name -> pkg.imrpc.EngineSnapshotDiskInfo.ChildrenEntry
	40, // 19: pkg.imrpc.EngineSnapshotDiskInfo.labels:type_name -> pkg.imrpc.EngineSnapshotDiskInfo.LabelsEntry
	0,  // 20: pkg.imrpc.EngineSnapshotRevertRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	0,  // 21: pkg.imrpc.EngineSnapshotPurgeRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	41, // 22: pkg.imrpc.EngineSnapshotPurgeStatusProxyResponse.status:type_name -> pkg.imrpc.EngineSnapshotPurgeStatusProxyResponse.StatusEntry
	0,  // 23: pkg.imrpc.EngineSnapshotCloneRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	42, // 24: pkg.imrpc.EngineSnapshotCloneStatusProxyResponse.status:type_name -> pkg.imrpc.EngineSnapshotCloneStatusProxyResponse.StatusEntry
	0,  // 25: pkg.imrpc.EngineSnapshotRemoveRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	0,  // 26: pkg.imrpc.EngineSnapshotBackupRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	43, // 27: pkg.imrpc.EngineSnapshotBackupRequest.labels:type_name -> pkg.imrpc.EngineSnapshotBackupRequest.LabelsEntry
	0,  // 28: pkg.imrpc.EngineSnapshotBackupStatusRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	0,  // 29: pkg.imrpc.EngineBackupRestoreRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	44, // 30: pkg.imrpc.EngineBackupRestoreStatusProxyResponse.status:type_name -> pkg.imrpc.EngineBackupRestoreStatusProxyResponse.StatusEntry
	0,  // 31: pkg.imrpc.EngineBackupRestoreFinishRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	0,  // 32: pkg.imrpc.EngineReplicaAddRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	58, // 33: pkg.imrpc.EngineReplicaListProxyResponse.replica_list:type_name -> pkg.enginerpc.ReplicaListReply
	0,  // 34: pkg.imrpc.EngineReplicaVerifyRebuildRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	45, // 35: pkg.imrpc.EngineReplicaRebuildStatusProxyResponse.status:type_name -> pkg.imrpc.EngineReplicaRebuildStatusProxyResponse.StatusEntry
	0,  // 36: pkg.imrpc.EngineReplicaRemoveRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	0,  // 37: pkg.imrpc.EngineReplicaModeUpdateRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	59, // 38: pkg.imrpc.EngineReplicaModeUpdateRequest.mode:type_name -> pkg.enginerpc.ReplicaMode
	0,  // 39: pkg.imrpc.EngineSnapshotHashRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	0,  // 40: pkg.imrpc.EngineSnapshotHashStatusRequest.proxy_engine_request:type_name -> pkg.imrpc.ProxyEngineRequest
	46, // 41: pkg.imrpc.EngineSnapshotHashStatusProxyResponse.status:type_name -> pkg.imrpc.EngineSnapshotHashStatusProxyResponse.StatusEntry
	60, // 42: pkg.imrpc.EngineMetricsGetProxyResponse.metrics:type_name -> pkg.enginerpc.Metrics
	11, // 43: pkg.imrpc.EngineSnapshotListProxyResponse.DisksEntry.value:type_name -> pkg.imrpc.EngineSnapshotDiskInfo
	61, // 44: pkg.imrpc.EngineSnapshotPurgeStatusProxyResponse.StatusEntry.value:type_name -> pkg.enginerpc.SnapshotPurgeStatusResponse
	62, // 45: pkg.imrpc.EngineSnapshotCloneStatusProxyResponse.StatusEntry.value:type_name -> pkg.enginerpc.SnapshotCloneStatusResponse
	25, // 46: pkg.imrpc.EngineBackupRestoreStatusProxyResponse.StatusEntry.value:type_name -> pkg.imrpc.EngineBackupRestoreStatus
	63, // 47: pkg.imrpc.EngineReplicaRebuildStatusProxyResponse.StatusEntry.value:type_name -> pkg.enginerpc.ReplicaRebuildStatusResponse
	64, // 48: pkg.imrpc.EngineSnapshotHashStatusProxyResponse.StatusEntry.value:type_name -> pkg.enginerpc.SnapshotHashStatusResponse
	0,  // 49: pkg.imrpc.ProxyEngineService.ServerVersionGet:input_type -> pkg.imrpc.ProxyEngineRequest
	0,  // 50: pkg.imrpc.ProxyEngineService.VolumeGet:input_type -> pkg.imrpc.ProxyEngineRequest
	3,  // 51: pkg.imrpc.ProxyEngineService.VolumeExpand:input_type -> pkg.imrpc.EngineVolumeExpandRequest
	4,  // 52: pkg.imrpc.ProxyEngineService.VolumeFrontendStart:input_type -> pkg.imrpc.EngineVolumeFrontendStartRequest
	0,  // 53: pkg.imrpc.ProxyEngineService.VolumeFrontendShutdown:input_type -> pkg.imrpc.ProxyEngineRequest
	7,  // 54: pkg.imrpc.ProxyEngineService.VolumeUnmapMarkSnapChainRemovedSet:input_type -> pkg.imrpc.EngineVolumeUnmapMarkSnapChainRemovedSetRequest
	8,  // 55: pkg.imrpc.ProxyEngineService.VolumeSnapshotMaxCountSet:input_type -> pkg.imrpc.EngineVolumeSnapshotMaxCountSetRequest
	9,  // 56: pkg.imrpc.ProxyEngineService.VolumeSnapshotMaxSizeSet:input_type -> pkg.imrpc.EngineVolumeSnapshotMaxSizeSetRequest
	5,  // 57: pkg.imrpc.ProxyEngineService.VolumeSnapshot:input_type -> pkg.imrpc.EngineVolumeSnapshotRequest
	0,  // 58: pkg.imrpc.ProxyEngineService.SnapshotList:input_type -> pkg.imrpc.ProxyEngineRequest
	12, // 59: pkg.imrpc.ProxyEngineService.SnapshotRevert:input_type -> pkg.imrpc.EngineSnapshotRevertRequest
	13, // 60: pkg.imrpc.ProxyEngineService.SnapshotPurge:input_type -> pkg.imrpc.EngineSnapshotPurgeRequest
	0,  // 61: pkg.imrpc.ProxyEngineService.SnapshotPurgeStatus:input_type -> pkg.imrpc.ProxyEngineRequest
	15, // 62: pkg.imrpc.ProxyEngineService.SnapshotClone:input_type -> pkg.imrpc.EngineSnapshotCloneRequest
	0,  // 63: pkg.imrpc.ProxyEngineService.SnapshotCloneStatus:input_type -> pkg.imrpc.ProxyEngineRequest
	17, // 64: pkg.imrpc.ProxyEngineService.SnapshotRemove:input_type -> pkg.imrpc.EngineSnapshotRemoveRequest
	33, // 65: pkg.imrpc.ProxyEngineService.SnapshotHash:input_type -> pkg.imrpc.EngineSnapshotHashRequest
	34, // 66: pkg.imrpc.ProxyEngineService.SnapshotHashStatus:input_type -> pkg.imrpc.EngineSnapshotHashStatusRequest
	18, // 67: pkg.imrpc.ProxyEngineService.SnapshotBackup:input_type -> pkg.imrpc.EngineSnapshotBackupRequest
	20, // 68: pkg.imrpc.ProxyEngineService.SnapshotBackupStatus:input_type -> pkg.imrpc.EngineSnapshotBackupStatusRequest
	22, // 69: pkg.imrpc.ProxyEngineService.BackupRestore:input_type -> pkg.imrpc.EngineBackupRestoreRequest
	0,  // 70: pkg.imrpc.ProxyEngineService.BackupRestoreStatus:input_type -> pkg.imrpc.ProxyEngineRequest
	26, // 71: pkg.imrpc.ProxyEngineService.BackupRestoreFinish:input_type -> pkg.imrpc.EngineBackupRestoreFinishRequest
	65, // 72: pkg.imrpc.ProxyEngineService.CleanupBackupMountPoints:input_type -> google.protobuf.Empty
	27, // 73: pkg.imrpc.ProxyEngineService.ReplicaAdd:input_type -> pkg.imrpc.EngineReplicaAddRequest
	0,  // 74: pkg.imrpc.ProxyEngineService.ReplicaList:input_type -> pkg.imrpc.ProxyEngineRequest
	0,  // 75: pkg.imrpc.ProxyEngineService.ReplicaRebuildingStatus:input_type -> pkg.imrpc.ProxyEngineRequest
	29, // 76: pkg.imrpc.ProxyEngineService.ReplicaVerifyRebuild:input_type -> pkg.imrpc.EngineReplicaVerifyRebuildRequest
	31, // 77: pkg.imrpc.ProxyEngineService.ReplicaRemove:input_type -> pkg.imrpc.EngineReplicaRemoveRequest
	32, // 78: pkg.imrpc.ProxyEngineService.ReplicaModeUpdate:input_type -> pkg.imrpc.EngineReplicaModeUpdateRequest
	0,  // 79: pkg.imrpc.ProxyEngineService.MetricsGet:input_type -> pkg.imrpc.ProxyEngineRequest
	37, // 80: pkg.imrpc.ProxyEngineService.RemountReadOnlyVolume:input_type -> pkg.imrpc.RemountVolumeRequest
	1,  // 81: pkg.imrpc.ProxyEngineService.ServerVersionGet:output_type -> pkg.imrpc.EngineVersionProxyResponse
	2,  // 82: pkg.imrpc.ProxyEngineService.VolumeGet:output_type -> pkg.imrpc.EngineVolumeGetProxyResponse
	65, // 83: pkg.imrpc.ProxyEngineService.VolumeExpand:output_type -> google.protobuf.Empty
	65, // 84: pkg.imrpc.ProxyEngineService.VolumeFrontendStart:output_type -> google.protobuf.Empty
	65, // 85: pkg.imrpc.ProxyEngineService.VolumeFrontendShutdown:output_type -> google.protobuf.Empty
	65, // 86: pkg.imrpc.ProxyEngineService.VolumeUnmapMarkSnapChainRemovedSet:output_type -> google.protobuf.Empty
	65, // 87: pkg.imrpc.ProxyEngineService.VolumeSnapshotMaxCountSet:output_type -> google.protobuf.Empty
	65, // 88: pkg.imrpc.ProxyEngineService.VolumeSnapshotMaxSizeSet:output_type -> google.protobuf.Empty
	6,  // 89: pkg.imrpc.ProxyEngineService.VolumeSnapshot:output_type -> pkg.imrpc.EngineVolumeSnapshotProxyResponse
	10, // 90: pkg.imrpc.ProxyEngineService.SnapshotList:output_type -> pkg.imrpc.EngineSnapshotListProxyResponse
	65, // 91: pkg.imrpc.ProxyEngineService.SnapshotRevert:output_type -> google.protobuf.Empty
	65, // 92: pkg.imrpc.ProxyEngineService.SnapshotPurge:output_type -> google.protobuf.Empty
	14, // 93: pkg.imrpc.ProxyEngineService.SnapshotPurgeStatus:output_type -> pkg.imrpc.EngineSnapshotPurgeStatusProxyResponse
	65, // 94: pkg.imrpc.ProxyEngineService.SnapshotClone:output_type -> google.protobuf.Empty
	16, // 95: pkg.imrpc.ProxyEngineService.SnapshotCloneStatus:output_type -> pkg.imrpc.EngineSnapshotCloneStatusProxyResponse
	65, // 96: pkg.imrpc.ProxyEngineService.SnapshotRemove:output_type -> google.protobuf.Empty
	65, // 97: pkg.imrpc.ProxyEngineService.SnapshotHash:output_type -> google.protobuf.Empty
	35, // 98: pkg.imrpc.ProxyEngineService.SnapshotHashStatus:output_type -> pkg.imrpc.EngineSnapshotHashStatusProxyResponse
	19, // 99: pkg.imrpc.ProxyEngineService.SnapshotBackup:output_type -> pkg.imrpc.EngineSnapshotBackupProxyResponse
	21, // 100: pkg.imrpc.ProxyEngineService.SnapshotBackupStatus:output_type -> pkg.imrpc.EngineSnapshotBackupStatusProxyResponse
	23, // 101: pkg.imrpc.ProxyEngineService.BackupRestore:output_type -> pkg.imrpc.EngineBackupRestoreProxyResponse
	24, // 102: pkg.imrpc.ProxyEngineService.BackupRestoreStatus:output_type -> pkg.imrpc.EngineBackupRestoreStatusProxyResponse
	65, // 103: pkg.imrpc.ProxyEngineService.BackupRestoreFinish:output_type -> google.protobuf.Empty
	65, // 104: pkg.imrpc.ProxyEngineService.CleanupBackupMountPoints:output_type -> google.protobuf.Empty
	65, // 105: pkg.imrpc.ProxyEngineService.ReplicaAdd:output_type -> google.protobuf.Empty
	28, // 106: pkg.imrpc.ProxyEngineService.ReplicaList:output_type -> pkg.imrpc.EngineReplicaListProxyResponse
	30, // 107: pkg.imrpc.ProxyEngineService.ReplicaRebuildingStatus:output_type -> pkg.imrpc.EngineReplicaRebuildStatusProxyResponse
	65, // 108: pkg.imrpc.ProxyEngineService.ReplicaVerifyRebuild:output_type -> google.protobuf.Empty
	65, // 109: pkg.imrpc.ProxyEngineService.ReplicaRemove:output_type -> google.protobuf.Empty
	65, // 110: pkg.imrpc.ProxyEngineService.ReplicaModeUpdate:output_type -> google.protobuf.Empty
	36, // 111: pkg.imrpc.ProxyEngineService.MetricsGet:output_type -> pkg.imrpc.EngineMetricsGetProxyResponse
	65, // 112: pkg.imrpc.ProxyEngineService.RemountReadOnlyVolume:output_type -> google.protobuf.Empty
	81, // [81:113] is the sub-list for method output_type
	49, // [49:81] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_pkg_imrpc_proxy_proto_init() }
func file_pkg_imrpc_proxy_proto_init() {
	if File_pkg_imrpc_proxy_proto != nil {
		return
	}
	file_pkg_imrpc_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_imrpc_proxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyEngineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVersionProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVolumeGetProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVolumeExpandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVolumeFrontendStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVolumeSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVolumeSnapshotProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVolumeUnmapMarkSnapChainRemovedSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVolumeSnapshotMaxCountSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineVolumeSnapshotMaxSizeSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotListProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotDiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotRevertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotPurgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotPurgeStatusProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotCloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotCloneStatusProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotBackupProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotBackupStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotBackupStatusProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineBackupRestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineBackupRestoreProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineBackupRestoreStatusProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineBackupRestoreStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineBackupRestoreFinishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineReplicaAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineReplicaListProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineReplicaVerifyRebuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineReplicaRebuildStatusProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineReplicaRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineReplicaModeUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotHashStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineSnapshotHashStatusProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineMetricsGetProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_imrpc_proxy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemountVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_imrpc_proxy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_imrpc_proxy_proto_goTypes,
		DependencyIndexes: file_pkg_imrpc_proxy_proto_depIdxs,
		MessageInfos:      file_pkg_imrpc_proxy_proto_msgTypes,
	}.Build()
	File_pkg_imrpc_proxy_proto = out.File
	file_pkg_imrpc_proxy_proto_rawDesc = nil
	file_pkg_imrpc_proxy_proto_goTypes = nil
	file_pkg_imrpc_proxy_proto_depIdxs = nil
}
